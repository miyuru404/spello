name: Flask CI and Deploy

on:
  push:
    branches: [ main, master, dev ]
    
jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.13]
        mongodb-version: [4.4]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # Use MongoDB mocking instead of actual MongoDB connection
    - name: Set MongoDB mocking environment
      run: |
        echo "Using mongomock for tests"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install flask vosk rapidfuzz pymongo flask-pymongo flask-cors pytest pytest-flask mongomock; fi
    
    - name: Download Vosk model or create mock
      run: |
        mkdir -p vosk-model-small-en-us-0.15
        echo "Mock vosk model for testing" > vosk-model-small-en-us-0.15/README
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Find Backend directory (case-insensitive)
      id: find-backend
      run: |
        if [ -d "Backend" ]; then
          echo "BACKEND_DIR=Backend" >> $GITHUB_ENV
        elif [ -d "backend" ]; then
          echo "BACKEND_DIR=backend" >> $GITHUB_ENV
        else
          echo "BACKEND_DIR=." >> $GITHUB_ENV
          echo "Warning: No Backend directory found, using current directory"
        fi
    
    - name: Test with pytest
      run: |
        cd ${{ env.BACKEND_DIR }}
        # Check if tests directory exists
        if [ -d "tests" ]; then
          pytest -v tests/
        else
          # Run all test files in current directory
          pytest -v
        fi
    
    - name: Build Docker image
      id: docker-build
      run: |
        cd ${{ env.BACKEND_DIR }}
        # Check if Dockerfile exists
        if [ -f "Dockerfile" ]; then
          docker build -t spello-backend .
          echo "DOCKER_BUILT=true" >> $GITHUB_ENV
        else
          echo "No Dockerfile found, skipping Docker build"
          echo "DOCKER_BUILT=false" >> $GITHUB_ENV
        fi
    
    - name: Test Docker container
      if: env.DOCKER_BUILT == 'true'
      run: |
        docker run --name spello-test -d -p 5000:5000 spello-backend
        sleep 5
        curl -I http://localhost:5000/ || echo "Warning: Application endpoint test failed, but continuing"
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only deploy when:
    # 1. It's a push to main or master branch
    # 2. It's in the organization's repo (not a fork)
    # Replace YOUR_ORG_NAME with your actual organization name
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.repository_owner == 'vizakan10'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Deploy to PythonAnywhere
      run: |
        python Backend/deploy_to_pythonanywhere.py
      env:
        PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
        PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
        APP_DIRECTORY: ${{ secrets.APP_DIRECTORY }}